<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Your awesome title</title>
    <description>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.
</description>
    <link>localhost/</link>
    <atom:link href="localhost/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sun, 17 Apr 2016 00:47:23 -0400</pubDate>
    <lastBuildDate>Sun, 17 Apr 2016 00:47:23 -0400</lastBuildDate>
    <generator>Jekyll v3.1.2</generator>
    
      <item>
        <title>Building a Better Resume</title>
        <description>&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/zP12eCL.png&quot; class=&quot;responsive-img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I’ve taken pride in the fact that my resume didn’t look like that of most engineers that I knew. &lt;em&gt;Mine&lt;/em&gt; was cool. &lt;em&gt;Mine&lt;/em&gt; was modern. &lt;em&gt;Mine&lt;/em&gt; was sleek. But above all, I took pride in the fact that I thought it followed the tenants of good typographic design. In fact, I often used my resume as a jumping off point to talk about my love of the print medium, typographic design, and how I think about designing for the web, desktop, or mobile.&lt;/p&gt;

&lt;p&gt;It wasn’t until a few weeks ago when I took a hard look at my old resume that I decided I wasn’t designing for the user. I was designing for myself.&lt;/p&gt;

&lt;p&gt;This happens often with resume designs. I see impracticality everywhere– many “modern” or “design-centered” resumes I’ve seen constantly forget the target audience: recruiters. Let’s do a thought experiment.&lt;/p&gt;

&lt;p&gt;Imagine you’re designing some new product, say a microwave. Now, you’re a software developer so you might think, “Let’s make sure it microwaves food correctly but…” and that’s where you start to think of all sorts of cool stuff you could include in this new microwave. Then, you get sucked into thinking “What if we had a nice API that can integrate with Slack?” or “What if we could programmatically change the lighting to match the music coming from your Sonos Play system?” These are nice, but they aren’t what the target audience or user is looking for. Microwave buyers buy microwaves to do one thing: microwave things for a set period of time. Oh, there’s a popcorn button that roughly sets the timer to the amount of time I need to microwave a bag of popcorn? Awesome, that’s icing on the cake. But, if it doesn’t do the singular job of making stuff &lt;em&gt;hot&lt;/em&gt;, you’ve completely lost the buyer.&lt;/p&gt;

&lt;p&gt;In the case of job hunting, the buyer is the recruiter.&lt;/p&gt;

&lt;p&gt;After a (successful) job hunt season, I’ve learned a lot. Most of the stuff I’ll be talking about will probably seem obvious, but it’s often the most obvious things that pass our attention.&lt;/p&gt;

&lt;h4 id=&quot;typographic-structure&quot;&gt;Typographic Structure&lt;/h4&gt;

&lt;p&gt;Design is often seen as a necessary evil in a lot of computer science circles. That’s why many of your favorite professors’ web pages are just plain old html files with inline styling, no fancy Javascript, and no extra “flair”. However, I would be bold enough to say that their websites are probably better designed than yours. While your website might be built on the newest front end framework with support with beautiful transitions using Javascript, the fact of the matter is this: The professor’s website can guide your eyes down the website as quickly and efficiently as possible, and you’ll find the important information faster than on your beautiful website.&lt;/p&gt;

&lt;p&gt;Why is this? You’ve spent a day or two perfecting your own personal showcase of your works and your professor just dropped a few &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; tags, some &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;p&amp;gt;&lt;/code&gt; tags and that’s it.&lt;/p&gt;

&lt;p&gt;The reason why their websites are more readable is because they (at least subconsciously) understand structure. You do too, but often times, new shiny tools or frameworks get in the way of that.&lt;/p&gt;

&lt;p&gt;When you read a book, you know when the book starts because the chapter with larger letters and often separates it from the rest of the opening paragraph. The separation allows your pre-conditioned brain to immediately recognize &lt;em&gt;“this is where  I need to start reading”&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Similarly, with a resume, you’ll want to emphasize section headers with larger print and some sort of separation between the header and your body text. Additionally, make sure that you’re making the individual elements in your sections separate from each other by having subheaders that are large and distinct as to not distract the reader.&lt;/p&gt;

&lt;p&gt;Remember, by the time you finish reading this sentence and the next, whatever HR representative that is going over your resume will be done. They typically spend 10-15 seconds giving your resume a glance-over, looking for certain buzzwords and information that they deem important. &lt;em&gt;That&lt;/em&gt; is why it’s so important to properly design your resume in a way that’s readable. If you’ve got a lot of extra niceties on your resume, the recruiter probably won’t notice. If they do, it doesn’t matter, they’re already looking at the next resume.&lt;/p&gt;

&lt;p&gt;It’s your job to guide them down your resume. The way you present yourself on a single sheet of paper has the power to get your foot in the door. If the recruiter can’t see anything but a pretty piece of paper with no substance, your resume is going in the “No” pile.&lt;/p&gt;

&lt;h4 id=&quot;typefaces&quot;&gt;Typefaces&lt;/h4&gt;

&lt;p&gt;On top of properly structuring your resume, make sure you also use an appropriate typeface. Please don’t use Comic Sans and expect a call back. Look into your collection of typefaces on your computer and pick one that’s boring. Really, really boring. Now, go from that and go up a notch if you want to give it some extra “punch”. That doesn’t mean pick Times New Roman and then go on and pick Papyrus. We’re talking about going from Times New Roman to Garamond. Something subtly different that will set you apart without making it look like you came into the interview wearing a bright pink suit.&lt;/p&gt;

&lt;p&gt;There are a lot of resources on the web about how to properly combine typefaces in such a way to make your document more typographically interesting. One of the most important is this: Whatever combination of typefaces you choose, make sure the end result is harmonious. Don’t pick a combination that distracts– one that makes the reader ask: “Why the hell did they pick these two fonts?”. Pick a combination that, using their differences, elevates both at the same time. For the most part though, if in doubt as to what you should use, make the safer bet and go with a single font. Yes, it will look more boring, but boring is better than terrible.&lt;/p&gt;

&lt;p&gt;One important tip- remember how I said a recruiter only looks at your resume for 10 to 15 seconds at a time? If your typeface is too thin or too unreadable, it’s gonna be even shorter than that. If you’re a student, you’re likely at a job fair or expo where there are hundreds of people jammed into one big room and it isn’t gonna be very quiet. Quiet means concentration. Quiet means they’re able to read easily. If the typeface you choose is too thin, it’s just an extra level of difficulty for the recruiter and like it or not, it’s not gonna make you stand out as a better candidate. Do I wish it wasn’t like this and recruiters would spend a good 5 minutes per application? Of course, but that’s unrealistic. Given the constraints, it’s your job to make the best of it.&lt;/p&gt;

&lt;h4 id=&quot;random-annoyances-i-have-with-some-modern-designs&quot;&gt;Random Annoyances I have with some “Modern” Designs&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/IlwG6gI.jpg&quot; class=&quot;responsive-img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This thing has over 1.5k Likes on Behance right now.&lt;/p&gt;

&lt;p&gt;I’ve done a lot of Googling to find an ideal resume template just so I won’t have to make one of my own and time and time again, I see that none of them really match what I want. A lot of them have a weird chart with supposed “mastery” of skills in percentages. Every time I see one of them I wonder to myself, “What use is it to have you judge your own mastery?” It’s already been shown that engineers are &lt;em&gt;really&lt;/em&gt; bad at judging their interview experience. What makes you think that people are any better at judging their own knowledge of certain topics? Often times, the most knowledgeable people I know are those that admit the least about their skill or competency. They’re willing to admit that they don’t know everything and because of that, they’re able to constantly learn and get better.&lt;/p&gt;

&lt;p&gt;Another big “No-No” is the inclusion of a picture in the resume. According to US Labor laws, employers aren’t allowed to discriminate based on race, age, sex, and a whole bunch of other categories. If you’re including a picture, you’re putting a bit “DON’T TALK TO ME” sign on your back. Employers don’t want to deal with you because what could happen is a huge lawsuit if they get further down the process and choose not to hire you.&lt;/p&gt;

&lt;p&gt;A lot of these resumes also feature a ton of color. This is fine, if you’re able to make sure that 1) You’re always able to present the resume in color, as intended or 2) It looks fine in black and white. Everytime I’ve sat down in a job interview, the interviewer had a copy of my resume… in black and white. I can only imagine how &lt;em&gt;terrible&lt;/em&gt; some of the designs would look that prominently feature low contrast color combinations.&lt;/p&gt;

&lt;p&gt;Finally, a lot of these resumes seem to forget who the audience is. You’re targeting HR departments and recruiters, not graphic designers. I mean, your resume might end up in the hands of a graphic designer at some point, but it’s probably going through HR first. That’s the first hurdle you have to get through. Putting your experience in a timeline that’s hard to read and not very useful isn’t going to wow HR. It’s going to make you a joke at the water cooler.&lt;/p&gt;

&lt;h4 id=&quot;redesigning-my-personal-resume&quot;&gt;Redesigning My Personal Resume&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/dDn28iJ.jpg&quot; class=&quot;responsive-img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As mentioned earlier, I’ve always thought my resume was pretty great. It was beautiful, it was functional, and I’ve gotten complements from it. What’s not to love?&lt;/p&gt;

&lt;p&gt;I originally designed the document in Adobe InDesign and while it’s by far one of the best pieces of software for print design, it’s &lt;em&gt;not&lt;/em&gt; great for something like a resume for a college student that takes internships every summer and has new projects to add and has stuff to update every 6 months. That’s why I decided to rewrite my resume in LaTeX (Pronounced Lah-Tech).&lt;/p&gt;

&lt;p&gt;For those that are unaware of LaTeX, you’ve probably encountered it at some point in your life. If you’ve ever wondered why all the math assignments from your Calculus class all look similar from class to class, and how they’re able to put in equations elegantly and neatly into their Word doc, the answer is this: they’re not using Word.&lt;/p&gt;

&lt;p&gt;Now, not everything is nicer with LaTeX. For one, it’s harder to design by dragging and dropping mostly because dragging and dropping doesn’t exist in LaTeX. Instead, everything is done using the markup language. The benefit of this is if you’re comfortable with LaTeX already, you can easily write a resume by using the knowledge you already know. The downside of this is it has a somewhat significant learning curve. For most, it’s not worth it to learn. But, if you’re willing to Google around a little and learn it, it can be invaluable to you.&lt;/p&gt;

&lt;p&gt;The first thing I did after I decided to use LaTeX was to see if there were any templates already available for resumes. Sure enough, there was. &lt;a href=&quot;https://github.com/posquit0/Awesome-CV&quot;&gt;Awesome-CV&lt;/a&gt; caught my attention. It’s incredibly maintainable. The resume/CV is divided up into sections which are separated into different &lt;code class=&quot;highlighter-rouge&quot;&gt;.tex&lt;/code&gt; files– awesome. This way, your education, experience, other projects, skills, publications, and honors are all easily maintainable. With my old &lt;code class=&quot;highlighter-rouge&quot;&gt;.indd&lt;/code&gt; file, I would have to edit a block of text, hope that it wouldn’t over lap with another text box (it always did) and then rearrange the text to fix whatever I broke by adding text in the first place. For instance, the dates on the left hand side in the the work history, other projects, and education history are not at all connected to their respective sections. Instead, after I finished editing the body of the section I would have to go back and manually edit the dates to match them up with their respective sections. With LaTeX, since the formatting is handled through automatic typesetting, all I have to worry about is the actual content of the resume.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/HiftsI0.jpg&quot; class=&quot;responsive-img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The previous motif of bolding the first word of a section was one of the main points of the resume. It brought the document together thematically and was also useful in helping people determine what section of the document they were in. In my new design, I’ve decided to ditch that; instead going for a more traditional resume style. Like I said at the start, if your recruiter has 10-15 seconds to read a resume, I don’t want them to spend an extra 1 or 2 seconds on figuring out how to read it instead of focusing on the content. In doing so, I’ve also decided to go away from the completely Swiss look of my previous resume. Yes, the design was very utilitarian and modern, but if I’m going to be going back to a more traditional look, the typeface should follow. I’ve chosen Abril Fat Face as a serif accent font. For the copy, it’s a mixture of Roboto (Google’s default sans serif font), and Source Sans Pro. Both Roboto and Source Sans Pro are included in Awesome-CV by default and I found no reason to change them. They work well with each other, don’t clash with Abril Fat Face, and above all are both open source, a movement I am definitely a fan of.&lt;/p&gt;

&lt;p&gt;Another improvement upon my previous resume was the use of a thicker font. Previously, I was using Helvetica Neue throughout the entirety of my resume. I used all different variants of Helvetica Neue, mostly to emphasis certain parts of my resume as well as to add contrast in the document as well. What I realized after printing out my resume however, was that while it looked fine on a 24” 1080p monitor completely zoomed in while I was working on it; when I printed it out, the text wasn’t as readable as I would have liked. That’s something that often comes to my mind when looking at different resume designs on the internet. They might look great on a screen with the zoom at 150% or 200%, but when you’re reading it in person in a dimmly lit room or just in general, the readability changes dramatically. On top of that, while I decided not to include a serif font for my body text, I’ve added it to add additional contrast for the headers, while keeping the subheaders sans-serif to keep readability high. Since Abril Fat Face is quite thick, using the typeface in small sizes leads to poor readability.&lt;/p&gt;

&lt;p&gt;Structurally, the new design is basically a 90 degree rotation of the previous design. Gone are the vertical lines and the vertically stacked right hand side. As mentioned earlier, I’ve gone with a more traditional designed resume, which will be easier to read. On top of that benefit however, I’m also able to fit in significantly more information. Since the vertical stacking of dates is now gone and instead appears in line with the subheadings, I’m able to describe my experiences in more depth. It does come at the expensive of less white space which can decrease a bit of readability, but in my mind the pros outweigh the cons. On top of that, font size is much easier to manipulate in LaTeX than in Adobe InDesign since there’s a singular point of control.&lt;/p&gt;

&lt;p&gt;My favorite part of the resume, however, is probably the Languages &amp;amp; Skills portion. Previously, that section was kind of a mess. I listed a lot of different languages, frameworks, and tools in one fell swoop and it was probably terrible to try and parse. Awesome-CV has you covered on that front. You’re able to list skills in an easy to read manner and are categorized nicely. Since it is organized horizontally as opposed to vertically as I had done before, I was able to better categorize  my marketable skills into Languages, Frameworks, Database, Markup, Design, and Other.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/dZp9Y0p.png&quot; class=&quot;responsive-img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;That’s the resume update. I’m not really sure why I wrote this other than because I thought it would be nice to keep track of my thought process while (re)designing my resume. Hope you found it interesting. My personal template that I edited for this project can be found at my &lt;a href=&quot;http://www.github.com/thisisshi&quot;&gt;Github&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Wed, 06 Jan 2016 04:00:00 -0500</pubDate>
        <link>localhost/resume/2016/01/06/Writing-A-Better-Resume.html</link>
        <guid isPermaLink="true">localhost/resume/2016/01/06/Writing-A-Better-Resume.html</guid>
        
        
        <category>resume</category>
        
      </item>
    
      <item>
        <title>Dev Blog: Building the Angular Frequency Analyzer</title>
        <description>&lt;p&gt;Out of all the classes that I’m taking right now in my penultimate (!!) semester at OSU, the most interesting one is probably &lt;em&gt;Linguistics 3801: Codes and Code Breaking&lt;/em&gt;. Not only was I pretty enthralled with the 2014 Academy Award Winning Film &lt;em&gt;The Imitation Game&lt;/em&gt;, I’ve always been at least generally interested in codes and code breaking, mostly from a &lt;em&gt;“Hm, that’s pretty cool, I woudn’t have thought to do it that way”&lt;/em&gt; sort of way.&lt;/p&gt;

&lt;p&gt;To assist with breaking some of the ciphers in the class and in an effort to &lt;em&gt;finally&lt;/em&gt; start learning AngularJS, I decided that I would build a tool to help assist me with some of this code breaking. Currently, the name of the application is called theh “Angular Frequency Analyzer” which will no doubt change as the class progresses and I realize that I need to use additional tools other than frequency analysis.&lt;/p&gt;

&lt;p&gt;The first cipher we encountered was the Caesar shift, which while incredibly easy to crack, my application (in its current form) doesn’t quite support yet.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note: It is indeed possible to crack a ceasear shift with frequency analysis, but the amount of work involved in doing so would be a lot less efficient than even hand writing out each shift&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This application is best suited for cracking general monoalphabetic ciphers by hand with the applicationi assisting in some of the grunt work of counting all the instances of each letter and turning them into more user friendly percentages. Included in the application is a table of the frequency of English letters from &lt;a href=&quot;http://www.math.cornell.edu/~mec/2003-2004/cryptography/subs/frequencies.html&quot;&gt;the Math Explorers Club of Cornell University&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&quot;buliding-the-application&quot;&gt;Buliding the Application&lt;/h4&gt;

&lt;p&gt;Previously, I had basically no experience in AngularJS other than the brief tutorial (that I’m pretty sure I didn’t even finish) from their website. AngularJS is yet another MVC Javascript framework, this time coming from Google.&lt;/p&gt;

&lt;p&gt;What I knew that I wanted from the application was at least:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;The ability to dynamically analyze encrypted text in terms of character frequency&lt;/li&gt;
  &lt;li&gt;To display the results in a graphically pleasing manner&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;To satisfy the first one, I just had to do some string manipulation and analysis. A call to the function `` takes in the current input that the user has provided and begins to calculate the frequency of each character in the string. At first, I approached this by writing a huge switch case statement which technically would do the trick but at the cost of having a huge block of code that could be more efficently written.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;	&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cryptInput&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cryptInput&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]){&lt;/span&gt;
					&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;a&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;
					&lt;span class=&quot;nx&quot;&gt;$scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;hash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;hash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
					&lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
					&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;b&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;
					&lt;span class=&quot;nx&quot;&gt;$scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;hash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;hash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
					&lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
					&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;c&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;
					&lt;span class=&quot;nx&quot;&gt;$scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;hash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;hash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
					&lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
					&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;d&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;
					&lt;span class=&quot;nx&quot;&gt;$scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;hash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;hash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
					&lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
					&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;e&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;
					&lt;span class=&quot;nx&quot;&gt;$scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;hash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;hash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
					&lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
					&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;f&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;
					&lt;span class=&quot;nx&quot;&gt;$scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;hash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;hash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
					&lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
					&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;g&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;
					&lt;span class=&quot;nx&quot;&gt;$scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;hash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;hash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
					&lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
					&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;h&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;
					&lt;span class=&quot;nx&quot;&gt;$scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;hash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;hash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
					&lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
					&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;i&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;
					&lt;span class=&quot;nx&quot;&gt;$scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;hash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;hash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
					&lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
					&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;j&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;
					&lt;span class=&quot;nx&quot;&gt;$scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;hash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;hash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
					&lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
					&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Yuck. And that’s just the for loop. Instead, apparently you can do this magical thing in Javascript to access properties in objects through strings like so: &lt;code class=&quot;highlighter-rouge&quot;&gt;$scope.hash[cryptInput[i]]&lt;/code&gt; where hash is an object with a property that has the name stored in variable &lt;code class=&quot;highlighter-rouge&quot;&gt;cryptInput[i]&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;	&lt;span class=&quot;nx&quot;&gt;$scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;calcInstances&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
		&lt;span class=&quot;nx&quot;&gt;$scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cryptInput&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;angular&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;uppercase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cryptInput&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;nx&quot;&gt;$scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;hash&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;angular&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;copy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;hashmaster&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;nx&quot;&gt;$scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;percent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;angular&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;copy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;hashmaster&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;nx&quot;&gt;$scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;max&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;angular&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;copy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;maxmaster&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// Gets the Instances of each character&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cryptInput&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;nx&quot;&gt;$scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;hash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cryptInput&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;nx&quot;&gt;$scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;percent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cryptInput&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;hash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cryptInput&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cryptInput&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;hash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cryptInput&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]){&lt;/span&gt;
				&lt;span class=&quot;nx&quot;&gt;$scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;character&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cryptInput&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
				&lt;span class=&quot;nx&quot;&gt;$scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;hash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cryptInput&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;
			&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Much better.&lt;/p&gt;

&lt;p&gt;As you can see, not only am I able to tally up the number of instances of each letter in the encrypted text, I’m also able to determine the character with the most instances &lt;em&gt;and&lt;/em&gt; to calculate the percentage frequency of each character in one fell swoop. The rest of the application is mostly front end fiddling with Bootstrap and the use of a very nice table sort javascript library created by tristan which can be seen &lt;a href=&quot;https://github.com/tristen/tablesort&quot;&gt;here.&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Fri, 04 Sep 2015 05:00:00 -0400</pubDate>
        <link>localhost/angular/2015/09/04/Building-Angular-Frequency-Analyzer..html</link>
        <guid isPermaLink="true">localhost/angular/2015/09/04/Building-Angular-Frequency-Analyzer..html</guid>
        
        
        <category>angular</category>
        
      </item>
    
      <item>
        <title>Preparing for Coding Interviews - Part I</title>
        <description>&lt;p&gt;Fact: I’ve never done an honest to God, real life, 100% legit coding interview. At least, I don’t think I have. I’ve had the excellent (or perhaps not so excellent) ability to somehow not have to do a particularly hard technical interview… ever. So, with graduation coming in &lt;em&gt;less than a year&lt;/em&gt;, I’ve decided to brush up on some concepts that I may or may not have forgotten.&lt;/p&gt;

&lt;p&gt;Since teaching a subject is a great indicator that you yourself have learned the information, I’ve decided to devote at least some of my blog posts to working through the great books that are &lt;em&gt;Programming Interviews Exposed&lt;/em&gt; and &lt;em&gt;Cracking the Coding Interview&lt;/em&gt;.&lt;/p&gt;

&lt;h5 id=&quot;part-i-linked-lists&quot;&gt;Part I: Linked Lists&lt;/h5&gt;

&lt;p&gt;Now, although I don’t &lt;em&gt;plan&lt;/em&gt; on becoming a C programmer, it doesn’t hurt to keep options open. One of the easiest ways to determine if someone has a real understanding of pointers in C is to ask them to describe and implement a linked list.&lt;/p&gt;

&lt;p&gt;For those that are unfamiliar, a linked list is basically a very nice data structure that you can sort of envision as a train. On a train there are various cars, and on those cars they carry certain things – cargo, coal, people, etc. However, to successfully understand the train’s structure, all you need to know is what each car is connected to in a singular direction. The car at the front is connected to nothing (null), and each subsequent car is connected to the one that is infront of it. Now, if you were unaware of how the train looked, if you were given a description of what each car was connected to, you could easily arrange them in the correct order.&lt;/p&gt;

&lt;p&gt;Now, what does this model imply? First, it implies that each car carries some sort of object, or data. Secondly, it implies that each car knows what car it’s connected to from the front. That’s the pointer. In C, we use structs to describe the node in a linked list. Thus we have the following:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;k&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
	 	&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	 	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Here, we have our pointer, *next, pointing to the next node in our list. Then, we have our data which will be stored in the node.&lt;/p&gt;

&lt;p&gt;This is what’s called a Singly-Linked list. Obviously, the first improvement we can make to this is to not only store which node is in front of it, but also which node is previous to it. The main advantage to this approach is that it takes an inconsequential amount of memory to store the pointer to the previous node and also decreases the amount of time to search for the previous node significantly. Imagine if given a node you were asked to search for the node that came before it in a Singly-Linked List. How would you do it?&lt;/p&gt;

&lt;p&gt;The answer is: &lt;a href=&quot;http://stackoverflow.com/questions/7198508/given-a-node-how-can-i-find-previous-node-in-a-singly-linked-list&quot;&gt;you can’t&lt;/a&gt;. At least, not in a way that would be nearly as efficient as just creating a Doubly-Linked list. Of course, you could try and navigate the heap and look for a node object and check to see if the &lt;code class=&quot;highlighter-rouge&quot;&gt;*next&lt;/code&gt; pointer was equal to whatever your current memory location but let’s face it, that’s not an ideal solution.&lt;/p&gt;

&lt;p&gt;As mentioned previously, a Doubly-Linked List is merely a Singly-Linked List with informaion about its predecessor. To accomplish this, we modify the struct to the following:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;k&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prev&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now, we have both a pointer to the node that’s in front and to the node that is previous to it. At this point we should ask ourselves, how do we &lt;em&gt;use&lt;/em&gt; these newly created nodes? First, let’s think about what exactly these nodes are supposed to do. They’re supposed to tell us what’s in front of it and what came before it. If we’re going to instantiate a new Linked List, we should consider what exactly should go into the first element.&lt;/p&gt;

&lt;p&gt;If this element is the first element that is created, can it have a previous node? Can it have a successor node? Of course not. Again, imagine if you began constructing a train. The first car that you use will not be connected to anything. In the same vein, the first node will not have a &lt;code class=&quot;highlighter-rouge&quot;&gt;*next&lt;/code&gt; or a &lt;code class=&quot;highlighter-rouge&quot;&gt;*prev&lt;/code&gt; pointer. Instead, to indicate that this is the first item in the list, we will set &lt;code class=&quot;highlighter-rouge&quot;&gt;*next&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;NULL&lt;/code&gt; and to indicate that this is the last item in the list, we will set &lt;code class=&quot;highlighter-rouge&quot;&gt;*prev&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;NULL&lt;/code&gt;. Since the first car is both the first and the last part of the list, both will be null.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;n&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;insertInFront&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;node&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;newNode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;malloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sizeOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;If&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;newNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;}&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;newNode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;newNode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;head&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Let’s go line by line. In the first line of the function, we’re allocating memory for the new node by using the method &lt;code class=&quot;highlighter-rouge&quot;&gt;malloc&lt;/code&gt; and geting the size through &lt;code class=&quot;highlighter-rouge&quot;&gt;sizeOf&lt;/code&gt;. Next, we should check whether or not the memory was allocated correctly by checking the existence of &lt;code class=&quot;highlighter-rouge&quot;&gt;newNode&lt;/code&gt;. Finally, we being setting the values of the node. Firstly, the data is set. This shouldn’t require much additional explanation. The next line however, is a bit tricky. Many people are tempted to write the pointer as &lt;code class=&quot;highlighter-rouge&quot;&gt;newNode-&amp;gt;next = head&lt;/code&gt;. After all, the head variable is given to you. However, if you were to write that, the next pointer wouldn’t be pointing at a location in memory at all. Instead, it would be pointing at the local head variable. Now, again, the next line could also cause people to write &lt;code class=&quot;highlighter-rouge&quot;&gt;head = newNode&lt;/code&gt;. Instead, what should be done is &lt;code class=&quot;highlighter-rouge&quot;&gt;*head = newNode&lt;/code&gt;. Now, we’re correctly setting the pointer for head to the newNode we just created. Finally, we return true when the function completes successfully.&lt;/p&gt;

&lt;p&gt;Now, to insert a new node, we must take into consideration the same questions as before. Where is the next node in the list? Does the next node even exist? What about the previous node?&lt;/p&gt;

&lt;p&gt;To Be Continued.&lt;/p&gt;
</description>
        <pubDate>Thu, 23 Jul 2015 05:00:00 -0400</pubDate>
        <link>localhost/interviewprep/2015/07/23/Programming-Interview-Practice.html</link>
        <guid isPermaLink="true">localhost/interviewprep/2015/07/23/Programming-Interview-Practice.html</guid>
        
        
        <category>interviewprep</category>
        
      </item>
    
      <item>
        <title>Building a Modern Apple Extended Keyboard</title>
        <description>&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/7IEtL3z.jpg&quot; class=&quot;responsive-img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Last summer I saw a Vintage Apple Extended Keyboard II and instantly fell in love with the keycaps that were on it. Weird, I know. Korean keyboard enthusiast Sprit &lt;a href=&quot;https://geekhack.org/?topic=49930.0&quot;&gt;posted some pictures&lt;/a&gt; on the popular Mechanical Keyboard forum Geekhack and I immediatly told myself I needed to build one for myself.&lt;/p&gt;

&lt;p&gt;That was essentially the start of what I would consider my now “hardcore” keyboard hobby. I had previously seen and heard of mechanical keyboards before – in fact, the very first keyboard I had ever typed on was a Silicon Graphics AT101, with cream dampened ALPS switches. I could tell at the time that the keyboard felt much, much better than the alternative rubber dome keyboard that was included with my family’s new computer but I didn’t know why… at the time. All I knew was that even after my dad had moved the old keyboard out and plugged in the new one, I instantly disliked the typing experience.&lt;/p&gt;

&lt;h5 id=&quot;a-brief-history-of-mechanical-keyboards-and-the-aekii&quot;&gt;A Brief History of Mechanical Keyboards and the AEKII&lt;/h5&gt;

&lt;p&gt;Now, while I had never actually typed on an AEKII (Apple Extended Keyboard II) before, many models of the AEKII used the same keyswitches as that old SGI board that I had loved growing up. Sadly, after computers got much more popular (we’re talking early 90’s) manufacturers decided that it was far too costly to include these beautifully crafted and engineered things called “Mechanical Keyboards”. Nowadays, keyboards are typically made by using some sort of circuit sheet or PCB, attaching a rubber sheet over top, and finally putting keycaps on top of that in some housing. Traditional mechanical keyboards used individual keyswitches, similar to the ones found in things like guitar pedals and car doors, to receive input from the user. Obviously, building a keyswitch for each key on a typical 108 key keyboard is costly. Furthermore, most computer users aren’t as invested in using high quality input devices.&lt;/p&gt;

&lt;p&gt;The first Apple Extended Keyboard II shipped in 1990 with the Macintosh II and SE. Needless to say, the keyboard is a part of computing history. Apple manufactured a variety of models of the keyboard with all sorts of various switches. The important fact though, is that these switches were all of the ALPS stem variety. ALPS, a Japanese electronics company, produced its ALPS switches from as early as 1983. Sadly, it no longer produces keyboard switches as the market has become more and more niche.&lt;/p&gt;

&lt;h5 id=&quot;enter-matias&quot;&gt;Enter Matias&lt;/h5&gt;

&lt;p&gt;Matias, an American company that mainly produces Apple Macintosh accessories was well invested in creating mechanical keyboards for Apple/Mac users. Once ALPS decided to stop the production of its keyswitches, the Matias company took it open itself to begin producing keyswitches of its own, now known as the Matias Quiet Click, Matias Click, and Matias Linear switches.&lt;/p&gt;

&lt;p&gt;For this build, I purchased 200 Matias Quiet Click switches directly from them for $60 shipped. This would be more than enough to build at least three 60% alps board if I wanted.&lt;/p&gt;

&lt;h5 id=&quot;matias-quiet-click-keyswitch-review&quot;&gt;Matias Quiet Click Keyswitch Review&lt;/h5&gt;

&lt;p&gt;&lt;img src=&quot;http://www.micwil.com/images/gallery/matias_mini_quiet_pro_p3_825x600.jpg&quot; class=&quot;responsive-img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Contrary to popular belief, not all mechanical keyboards are necessarily loud. In fact, when Matias claims that the Quiet Click switches are quiet, they mean it. They’re much less loud than Cherry MX Blues and Greens of course, and by my ear, even a lot quieter than Cherry MX Clears or Cherry MX Browns. This made it the perfect option to use as a keyboard to bring and use at work.&lt;/p&gt;

&lt;p&gt;In terms of feel, the Matias Quiet Click switches are a very good option for those that may think that the widly available Cherry MX Blue, Browns, and Reds are too soft but may want to stay away from the stiffer Cherry MX Clear. In my mind these switches’ required actuation force is a very good balance between the stiffness of a Cherry MX Clear and the lightness of a Cherry MX Brown. In fact, I am quite close to counting these switches as my favorite switch of all time.&lt;/p&gt;

&lt;table class=&quot;u-full-width&quot;&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Switch Name&lt;/th&gt;
      &lt;th&gt;Actuation Force&lt;/th&gt;
      &lt;th&gt;Type&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Matias Quiet Click&lt;/td&gt;
      &lt;td&gt;60±5 cN&lt;/td&gt;
      &lt;td&gt;Tactile&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Cherry MX Clear&lt;/td&gt;
      &lt;td&gt;55 cN&lt;/td&gt;
      &lt;td&gt;Tactile&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Cherry MX Ergoclear&lt;/td&gt;
      &lt;td&gt;45 cN&lt;/td&gt;
      &lt;td&gt;Tactile&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Cherry MX Blue&lt;/td&gt;
      &lt;td&gt;45 cN&lt;/td&gt;
      &lt;td&gt;Clicky&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Topre&lt;/td&gt;
      &lt;td&gt;45 cN&lt;/td&gt;
      &lt;td&gt;Linear&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Cherry MX Brown&lt;/td&gt;
      &lt;td&gt;45 cN&lt;/td&gt;
      &lt;td&gt;Tactile&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Cherry MX Red&lt;/td&gt;
      &lt;td&gt;45 cN&lt;/td&gt;
      &lt;td&gt;Linear&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Source: &lt;a href=&quot;http://www.deskthority.net&quot;&gt;Deskthority&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, while on paper the Matias Quiet Click seem to be a much heavier switch than even a Cherry MX Clear, that has not been my experience in day to day use.&lt;/p&gt;

&lt;h5 id=&quot;the-pcb-and-plate&quot;&gt;The PCB and Plate&lt;/h5&gt;

&lt;p&gt;Originally, I had planned on handwiring the board together, using diodes and spare wire to connect each switch individually. thankfully, Hasu on geekhack started a group buy for his Alps64 PCB which I immediatly jumped on. As that was going into production and people were placing their orders, geekhacker nubbinator also set up a group buy for a stainless steel AEKII plate which I also joined as well.&lt;/p&gt;

&lt;h5 id=&quot;putting-it-all-together&quot;&gt;Putting it all together&lt;/h5&gt;

&lt;p&gt;To finally assemble everything, all I had to do was solder the through-hole diodes that Hasu included, and install the switches on the plate and solder those in. All in all, the total time that was required was probably around a few hours. Now, it was time for the fun part.&lt;/p&gt;

&lt;p&gt;Arguably, the best part of using a TMK compatible controller is the ability to create up to 32 custom layers on the board, all accessable through certain key combinations. This was my first time writing custom firmware for the keyboard and writing layouts was some of the easiest programming I’ve done in a long time. For those that aren’t at all familiar with programming this could pose a challenge but luckily to get up and running it really doesn’t require a whole lot of expertise.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://geekhack.org/index.php?topic=71416.0&quot;&gt;AEKII Plate Group Buy&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://geekhack.org/index.php?topic=69740.0&quot;&gt;60% Alps PCB&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To Program the keyboard, you’ll need to clone TMK’s keyboard firmware repository from his &lt;a href=&quot;https://github.com/tmk/tmk_keyboard&quot;&gt;github&lt;/a&gt;. There, you’ll find all the resources necessary to start writing your layouts. &lt;a href=&quot;https://github.com/thisisshi/tmk_keyboard/blob/master/keyboard/alps64/Guide.md&quot;&gt;Here’s&lt;/a&gt; a detailed, step by step way to get started.&lt;/p&gt;

&lt;p&gt;And, that’s it! Now, check out some beauty shots of the keyboard:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/9eOwwh7.jpg&quot; class=&quot;responsive-img&quot; /&gt;
&lt;img src=&quot;http://i.imgur.com/U8ExaaZ.jpg&quot; class=&quot;responsive-img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Thanks for reading!&lt;/p&gt;
</description>
        <pubDate>Wed, 22 Jul 2015 15:00:44 -0400</pubDate>
        <link>localhost/keyboards/2015/07/22/building-a-modern-apple-extended-keyboard.html</link>
        <guid isPermaLink="true">localhost/keyboards/2015/07/22/building-a-modern-apple-extended-keyboard.html</guid>
        
        
        <category>keyboards</category>
        
      </item>
    
  </channel>
</rss>
